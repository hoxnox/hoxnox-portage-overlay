diff --git a/epan/dissectors/packet-ssl-utils.c b/epan/dissectors/packet-ssl-utils.c
index 59de9ea..cba0e47 100644
--- a/epan/dissectors/packet-ssl-utils.c
+++ b/epan/dissectors/packet-ssl-utils.c
@@ -4732,6 +4732,7 @@ ssl_common_init(ssl_master_key_map_t *mk_map,
     mk_map->session = g_hash_table_new(ssl_hash, ssl_equal);
     mk_map->tickets = g_hash_table_new(ssl_hash, ssl_equal);
     mk_map->crandom = g_hash_table_new(ssl_hash, ssl_equal);
+    mk_map->crandom_ip = g_hash_table_new(ssl_hash, ssl_equal);
     mk_map->pre_master = g_hash_table_new(ssl_hash, ssl_equal);
     mk_map->pms = g_hash_table_new(ssl_hash, ssl_equal);
     mk_map->tls13_client_early = g_hash_table_new(ssl_hash, ssl_equal);
@@ -4752,6 +4753,7 @@ ssl_common_cleanup(ssl_master_key_map_t *mk_map, FILE **ssl_keylog_file,
     g_hash_table_destroy(mk_map->session);
     g_hash_table_destroy(mk_map->tickets);
     g_hash_table_destroy(mk_map->crandom);
+    g_hash_table_destroy(mk_map->crandom_ip);
     g_hash_table_destroy(mk_map->pre_master);
     g_hash_table_destroy(mk_map->pms);
     g_hash_table_destroy(mk_map->tls13_client_early);
@@ -4973,6 +4975,8 @@ ssl_finalize_decryption(SslDecryptSession *ssl, ssl_master_key_map_t *mk_map)
         (!ssl->session.is_session_resumed ||
          !ssl_restore_master_key(ssl, "Session Ticket", FALSE,
                                  mk_map->tickets, &ssl->session_ticket)) &&
+        !ssl_restore_master_key(ssl, "Client Random IP", FALSE,
+                                 mk_map->crandom_ip, &ssl->client_random_ip) &&
         !ssl_restore_master_key(ssl, "Client Random", FALSE,
                                 mk_map->crandom, &ssl->client_random)) {
         if (ssl->cipher_suite->enc != ENC_NULL) {
@@ -5169,6 +5173,8 @@ ssl_compile_keyfile_regex(void)
         "RSA Session-ID:(?<session_id>" OCTET "+) Master-Key:"
         /* Matches Client Hellos having this Client Random */
         "|CLIENT_RANDOM (?<client_random>" OCTET "{32}) "
+        /* Matches Client Hellos having this Client Random and server IP*/
+        "|CLIENT_RANDOM_IP (?<client_random_ip>" OCTET "{36}) "
         /* Master-Secret is given, its length is fixed */
         ")(?<master_secret>" OCTET "{" G_STRINGIFY(SSL_MASTER_SECRET_LENGTH) "})"
         "|(?"
@@ -5235,6 +5241,7 @@ ssl_load_keyfile(const gchar *ssl_keylog_filename, FILE **keylog_file,
         { "encrypted_pmk",  mk_map->pre_master },
         { "session_id",     mk_map->session },
         { "client_random",  mk_map->crandom },
+        { "client_random_ip",  mk_map->crandom_ip },
         { "client_random_pms",  mk_map->pms },
         /* TLS 1.3 map from Client Random to derived secret. */
         { "client_early",       mk_map->tls13_client_early },
@@ -5278,6 +5285,10 @@ ssl_load_keyfile(const gchar *ssl_keylog_filename, FILE **keylog_file,
      *     (This format allows non-RSA SSL connections to be decrypted, i.e.
      *     ECDHE-RSA.)
      *
+     *   - "CLIENT_RANDOM_IP pppp xxxx yyyy"
+     *     Similar to CLIENT_RANDOM, except pppp - server IP address
+     *     (4 bytes hex-encoded).
+     *
      *   - "CLIENT_EARLY_TRAFFIC_SECRET xxxx yyyy"
      *   - "CLIENT_HANDSHAKE_TRAFFIC_SECRET xxxx yyyy"
      *   - "SERVER_HANDSHAKE_TRAFFIC_SECRET xxxx yyyy"
@@ -6742,9 +6753,24 @@ ssl_dissect_hnd_hello_common(ssl_common_dissect_t *hf, tvbuff_t *tvb,
         tvb_memcpy(tvb, rnd->data, offset, 32);
         rnd->data_len = 32;
         if (from_server)
+        {
             ssl->state |= SSL_SERVER_RANDOM;
+        }
         else
+        {
             ssl->state |= SSL_CLIENT_RANDOM;
+            if (session->srv_addr.len != 4)
+                return 0;
+            ssl->client_random_ip.data = (guchar *)g_malloc(rnd->data_len + 4);
+            /* the allocator can return a null pointer for a size equal to 0,
+             * and that must be allowed */
+            if (rnd->data_len > 0 && !ssl->client_random_ip.data)
+                return -1;
+            ssl->client_random_ip.data_len = (guint) rnd->data_len + 4;
+            memcpy(ssl->client_random_ip.data + 4, rnd->data, rnd->data_len);
+            memcpy(ssl->client_random_ip.data, session->srv_addr.data, 4);
+            ssl_print_data("client_random_ip is set to", ssl->client_random_ip.data, ssl->client_random.data_len + 4);
+        }
         ssl_debug_printf("%s found %s RANDOM -> state 0x%02X\n", G_STRFUNC,
                 from_server ? "SERVER" : "CLIENT", ssl->state);
     }
diff --git a/epan/dissectors/packet-ssl-utils.h b/epan/dissectors/packet-ssl-utils.h
index d861370..29b9e34 100644
--- a/epan/dissectors/packet-ssl-utils.h
+++ b/epan/dissectors/packet-ssl-utils.h
@@ -463,6 +463,7 @@ typedef struct _SslDecryptSession {
     StringInfo session_ticket;
     StringInfo server_random;
     StringInfo client_random;
+    StringInfo client_random_ip;
     StringInfo master_secret;
     StringInfo handshake_data;
     /* the data store for this StringInfo must be allocated explicitly with a capture lifetime scope */
@@ -507,6 +508,7 @@ typedef struct {
     GHashTable *session;    /* Session ID (1-32 bytes) to master secret. */
     GHashTable *tickets;    /* Session Ticket to master secret. */
     GHashTable *crandom;    /* Client Random to master secret */
+    GHashTable *crandom_ip; /* Client Random and server IP to master secret */
     GHashTable *pre_master; /* First 8 bytes of encrypted pre-master secret to
                                pre-master secret */
     GHashTable *pms;        /* Client Random to unencrypted pre-master secret */
